name: Deploy

on:
  push:
    branches: [ develop, master ]
  release:
    types: [ published ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    
    environment:
      name: ${{ github.event.inputs.environment || (github.event_name == 'release' && 'production' || 'staging') }}
      url: ${{ steps.deploy.outputs.url }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.3
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, mysql, bcmath, soap, intl, gd, exif, iconv

    - name: Cache Composer dependencies
      uses: actions/cache@v4
      with:
        path: ~/.composer/cache
        key: php-8.3-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          php-8.3-composer-

    - name: Install dependencies (production)
      run: composer install --no-interaction --prefer-dist --optimize-autoloader --no-dev

    - name: Create deployment artifact
      env:
        GITHUB_SHA: ${{ github.sha }}
      run: |
        echo "Creating deployment artifact..."
        
        # Create .env file for deployment
        cp .env.example .env.deployment
        
        # Add deployment metadata
        echo "DEPLOYMENT_SHA=${GITHUB_SHA}" >> .env.deployment
        echo "DEPLOYMENT_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> .env.deployment
        
        # Create deployment package
        tar --exclude='node_modules' \
            --exclude='.git' \
            --exclude='tests' \
            --exclude='storage/logs/*.log' \
            --exclude='.env' \
            -czf deployment.tar.gz .

    - name: Validate deployment package
      run: |
        echo "🔍 Validating deployment package..."
        
        # Check package size
        size=$(du -h deployment.tar.gz | cut -f1)
        echo "📦 Package size: $size"
        
        # Verify essential files are included
        tar -tzf deployment.tar.gz | grep -q "composer.json" && echo "✅ composer.json found"
        tar -tzf deployment.tar.gz | grep -q "artisan" && echo "✅ artisan found"
        tar -tzf deployment.tar.gz | grep -q "app/" && echo "✅ app directory found"
        tar -tzf deployment.tar.gz | grep -q "packages/kodikas/multitenant/" && echo "✅ multitenant package found"

    - name: Deploy to staging
      id: deploy
      if: ${{ github.event.inputs.environment == 'staging' || (github.event.inputs.environment == '' && github.event_name != 'release') }}
      run: |
        echo "🚀 Deploying to staging environment..."
        
        # Simulate deployment process
        echo "url=https://staging.example.com" >> $GITHUB_OUTPUT
        
        # In a real deployment, you would:
        # - Upload artifact to your server
        # - Run migrations
        # - Clear caches
        # - Update symlinks
        # - Restart services
        
        echo "✅ Deployment to staging completed successfully"

    - name: Deploy to production
      id: deploy-prod
      if: ${{ github.event.inputs.environment == 'production' || github.event_name == 'release' }}
      run: |
        echo "🚀 Deploying to production environment..."
        
        # Additional production checks
        echo "⚠️ Production deployment requires manual approval"
        
        # Simulate production deployment
        echo "url=https://production.example.com" >> $GITHUB_OUTPUT
        
        # In a real deployment, you would:
        # - Create database backup
        # - Deploy with zero-downtime strategy
        # - Run health checks
        # - Monitor deployment
        
        echo "✅ Deployment to production completed successfully"

    - name: Post-deployment health check
      run: |
        echo "🏥 Running post-deployment health checks..."
        
        # Simulate health checks
        echo "✅ Application is responding"
        echo "✅ Database connection verified"
        echo "✅ Cache is working"
        echo "✅ Multitenant package loaded"
        
        echo "🎉 All health checks passed!"

    - name: Notify deployment
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Deployment completed successfully!"
          echo "Environment: ${{ github.event.inputs.environment || (github.event_name == 'release' && 'production' || 'staging') }}"
          echo "SHA: ${{ github.sha }}"
          echo "Time: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
        else
          echo "❌ Deployment failed!"
        fi