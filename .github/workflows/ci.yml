name: CI/CD Pipeline

on:
  push:
    branches: [ develop, master ]
  pull_request:
    branches: [ develop, master ]
  workflow_dispatch:

jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        php: [8.3, 8.4]
        laravel: [12.*]

    name: Tests (PHP ${{ matrix.php }} - Laravel ${{ matrix.laravel }})

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php }}
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, fileinfo, openssl
        coverage: xdebug
        ini-values: memory_limit=-1

    - name: Validate PHP version
      run: |
        php -v
        composer --version

    - name: Cache Composer dependencies
      uses: actions/cache@v4
      with:
        path: ~/.composer/cache
        key: php-${{ matrix.php }}-laravel-${{ matrix.laravel }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          php-${{ matrix.php }}-laravel-${{ matrix.laravel }}-composer-
          php-${{ matrix.php }}-composer-

    - name: Install Laravel ${{ matrix.laravel }}
      run: |
        composer require "laravel/framework:${{ matrix.laravel }}" --no-interaction --no-update
        composer update --prefer-stable --no-interaction --prefer-dist --optimize-autoloader

    - name: Verify Laravel installation
      run: |
        php artisan --version
        composer show laravel/framework

    - name: Copy environment file
      run: cp .env.example .env

    - name: Generate application key
      run: php artisan key:generate --force

    - name: Create database directory
      run: |
        mkdir -p database
        touch database/database.sqlite

    - name: Set database permissions
      run: chmod 666 database/database.sqlite

    - name: Configure environment for testing
      run: |
        echo "DB_CONNECTION=sqlite" >> .env
        echo "DB_DATABASE=$(pwd)/database/database.sqlite" >> .env
        echo "APP_ENV=testing" >> .env
        echo "CACHE_DRIVER=array" >> .env
        echo "SESSION_DRIVER=array" >> .env
        echo "QUEUE_CONNECTION=sync" >> .env
        echo "LOG_CHANNEL=single" >> .env
        echo "BROADCAST_DRIVER=log" >> .env
        echo "MAIL_MAILER=array" >> .env

    - name: Clear Laravel configuration cache
      run: |
        php artisan config:clear || true
        php artisan route:clear || true
        php artisan view:clear || true

    - name: Run database migrations
      env:
        DB_CONNECTION: sqlite
        DB_DATABASE: database/database.sqlite
        CACHE_DRIVER: array
        SESSION_DRIVER: array
      run: |
        echo "Running migrations..."
        php artisan migrate:fresh --force
        echo "Checking database tables..."
        php artisan db:show --database=sqlite

    - name: Run tests with coverage
      env:
        DB_CONNECTION: sqlite
        DB_DATABASE: database/database.sqlite
        APP_ENV: testing
      run: |
        vendor/bin/phpunit --coverage-clover=coverage.xml --coverage-text --testsuite=Feature,Unit

    - name: Test multitenant package
      run: |
        echo "üè¢ Testing multitenant package..."
        cd packages/kodikas/multitenant
        if [ -f "composer.json" ]; then
          echo "Installing multitenant package dependencies..."
          composer require "laravel/framework:${{ matrix.laravel }}" --no-interaction --no-update
          composer install --no-interaction --prefer-dist --optimize-autoloader
          
          echo "Running multitenant package tests..."
          if [ -f "vendor/bin/phpunit" ]; then
            vendor/bin/phpunit --display-warnings --display-errors
          else
            echo "PHPUnit not found for multitenant package"
          fi
          
          echo "Validating package structure..."
          test -f composer.json && echo "‚úÖ composer.json exists"
          test -d src && echo "‚úÖ src directory exists"
          test -d tests && echo "‚úÖ tests directory exists"
          test -f README.md && echo "‚úÖ README.md exists"
        else
          echo "‚ùå Multitenant package composer.json not found"
          exit 1
        fi

    - name: Upload coverage to Codecov
      if: matrix.php == '8.4' && matrix.laravel == '12.*'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: php-${{ matrix.php }}-laravel-${{ matrix.laravel }}
        fail_ci_if_error: false

  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality & Static Analysis

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.4
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, fileinfo, openssl
        ini-values: memory_limit=-1

    - name: Cache Composer dependencies
      uses: actions/cache@v4
      with:
        path: ~/.composer/cache
        key: php-8.4-quality-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          php-8.4-quality-composer-

    - name: Install dependencies
      run: |
        composer require "laravel/framework:12.*" --no-interaction --no-update
        composer install --no-interaction --prefer-dist --optimize-autoloader

    - name: Install quality tools
      run: |
        composer require --dev "laravel/pint:^1.0" --no-interaction
        composer require --dev "phpstan/phpstan:^1.0" --no-interaction
        composer require --dev "larastan/larastan:^2.0" --no-interaction

    - name: Run Laravel Pint (Code Style)
      run: |
        if [ -f "vendor/bin/pint" ]; then
          vendor/bin/pint --test --verbose
        else
          echo "Laravel Pint not available, skipping code style check"
        fi

    - name: Run PHPStan (Static Analysis)
      run: |
        if [ -f "vendor/bin/phpstan" ]; then
          vendor/bin/phpstan analyse app packages/kodikas/multitenant/src --level=5 --memory-limit=2G
        else
          echo "PHPStan not available, skipping static analysis"
        fi

    - name: Validate composer files
      run: |
        composer validate --strict --no-check-all
        cd packages/kodikas/multitenant
        if [ -f "composer.json" ]; then
          composer validate --strict --no-check-all
        fi

    - name: Check for security vulnerabilities
      run: |
        composer audit --format=plain
        echo "‚úÖ Security audit completed"
